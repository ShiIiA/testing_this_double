# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rRSegdTULlczjwu11IQzYDFAIJmlE8TF
"""

import os
import logging
import subprocess
import tempfile
import warnings
import streamlit as st
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
from fairlearn.metrics import demographic_parity_difference, equalized_odds_difference
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
from torchvision.models import DenseNet121_Weights

# ------------------------- Logging Configuration -------------------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ------------------------- PAGE CONFIGURATION -------------------------
st.set_page_config(
    page_title="Gender Bias in Radiology",
    page_icon="üêç",
    layout="wide"
)

# ------------------------- MODEL LOADING FUNCTIONS -------------------------
@st.cache_resource(show_spinner=True)
def load_chexnet_model():
    model = models.densenet121(weights=DenseNet121_Weights.IMAGENET1K_V1)
    model.classifier = nn.Linear(1024, 2)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    model.eval()
    return model, device

try:
    chexnet_model, device = load_chexnet_model()
    st.sidebar.success("‚úÖ CheXNet Model Loaded Successfully!")
except Exception as e:
    logging.error("Error loading CheXNet model", exc_info=True)
    st.sidebar.error(f"üö® Error loading CheXNet model: {e}")

# ------------------------- CHEXAGENT INFERENCE FUNCTION -------------------------
def chexagent_inference(image, prompt="Analyze the X-ray and return the detected disease."):
    try:
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
            image.save(tmp.name)
            tmp_path = tmp.name

        result = subprocess.run(
            ["python", "chexagent_worker.py", tmp_path, prompt],
            capture_output=True, text=True
        )
        os.remove(tmp_path)

        if result.returncode != 0:
            st.error("CheXagent Worker Error: " + result.stderr)
            raise Exception("Worker failed with error: " + result.stderr)

        return result.stdout.strip()
    except Exception as ex:
        logging.error("CheXagent inference error", exc_info=True)
        raise ex

# ------------------------- IMAGE PREPROCESSING FUNCTION -------------------------
@st.cache_resource(show_spinner=True)
def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor()
    ])
    return transform(image).unsqueeze(0)

# ------------------------- MODEL PREDICTION FUNCTION -------------------------
def predict_with_models(image):
    """
    Runs inference using both CheXNet and CheXagent models and returns their predictions.
    """
    results = {}

    # CheXNet Prediction
    tensor_img = preprocess_image(image)
    tensor_img = tensor_img.to(device)
    with torch.no_grad():
        logits = chexnet_model(tensor_img)
        probs = F.softmax(logits, dim=1)
        disease_prob = probs[0, 1].item()
        predicted_binary = 1 if disease_prob >= 0.5 else 0
    results["CheXNet"] = ("Disease Detected" if predicted_binary else "No Disease", disease_prob)

    # CheXagent Prediction
    try:
        chexagent_response = chexagent_inference(image)
        results["CheXagent"] = (chexagent_response, None)  # CheXagent outputs text
    except Exception as e:
        results["CheXagent"] = ("Error", None)

    return results

# ------------------------- GENDER BIAS ANALYSIS -------------------------
def analyze_bias(df_results, df_truth, disease_col, image_col):
    """
    Compares model predictions with ground truth and computes bias metrics.
    """
    df_truth[disease_col] = df_truth[disease_col].str.lower().str.strip()
    merged = pd.merge(df_results, df_truth[[image_col, disease_col]], how="left", left_on="Image_ID", right_on=image_col)
    merged = merged.rename(columns={disease_col: "True_Label"})
    merged["Correct"] = merged["Prediction"].str.lower().str.strip() == merged["True_Label"].str.lower().str.strip()

    # Compute fairness metrics
    demographic_parity = demographic_parity_difference(merged["Correct"], sensitive_features=merged["Gender"])
    equalized_odds = equalized_odds_difference(merged["Correct"], sensitive_features=merged["Gender"])

    return merged, demographic_parity, equalized_odds

# ------------------------- STREAMLIT PAGE: MODEL COMPARISON -------------------------
def model_comparison_page():
    st.title("ü§ñ Model Comparison")
    st.markdown("Upload chest X-rays and compare predictions from CheXNet and CheXagent.")

    uploaded_images = st.file_uploader("Upload X‚Äëray Images", type=["png", "jpg", "jpeg"], accept_multiple_files=True)
    if uploaded_images:
        for img in uploaded_images:
            image = Image.open(img).convert("RGB")
            st.image(image, caption=f"Uploaded: {img.name}", width=300)

            # Run Predictions
            results = predict_with_models(image)
            chexnet_pred, chexnet_prob = results["CheXNet"]
            chexagent_pred, _ = results["CheXagent"]

            st.write(f"**CheXNet Prediction:** {chexnet_pred} | **Probability:** {chexnet_prob:.2%}")
            st.write(f"**CheXagent Prediction:** {chexagent_pred}")

# ------------------------- STREAMLIT PAGE: GENDER BIAS ANALYSIS -------------------------
def gender_bias_analysis_page():
    st.title("‚öñÔ∏è Gender Bias Analysis")

    df_results = st.session_state.get("df_results", pd.DataFrame(columns=["Image_ID", "Gender", "Prediction"]))
    df_truth = st.session_state.get("df_truth", None)

    if df_truth is None or df_results.empty:
        st.info("Upload images and ground truth labels first.")
        return

    disease_col = st.selectbox("Select Ground-Truth Disease Column:", df_truth.columns.tolist())
    image_col = st.selectbox("Select Image ID Column:", df_truth.columns.tolist())

    if st.button("Analyze Bias"):
        merged, demographic_parity, equalized_odds = analyze_bias(df_results, df_truth, disease_col, image_col)
        st.write("Merged Predictions with Ground Truth:")
        st.dataframe(merged.head())
        st.write(f"**Demographic Parity Difference:** {demographic_parity:.4f}")
        st.write(f"**Equalized Odds Difference:** {equalized_odds:.4f}")

# ------------------------- SIDEBAR NAVIGATION -------------------------
st.sidebar.title("Navigation")
selected_page = st.sidebar.radio("Go to", ["ü§ñ Model Comparison", "‚öñÔ∏è Gender Bias Analysis"])

if selected_page == "ü§ñ Model Comparison":
    model_comparison_page()
elif selected_page == "‚öñÔ∏è Gender Bias Analysis":
    gender_bias_analysis_page()